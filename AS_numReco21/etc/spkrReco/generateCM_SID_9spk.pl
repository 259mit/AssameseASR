#!/usr/bin/perl
use warnings;
#***************************************************************************
# PURPOSE     : Generate confusion matrix: Speaker Recognition task
# INPUT       : File containing outputs of 9 ASR systems when fed with
#               many test speech files of 9 speakers
#       Format:         spkModelId  fileName  scoreByModelOf_spkId
#       Example:        BN_IN1  bin_4811_0004028137  -8.569
#       Explanation: The log likelihood of bin_4811_0004028137
#                 being generated by the ASR model of BN_IN1 is -8.569
# OUTPUT        (1) LID accuracy and Confusion Matrix at the end
#               (2) contains the following information for every test file
#                       filename  score{1 2 3 â€¦ 9}      WRONG_recId
# AUTHOR      : chief
# DATE WRITTEN: 17-NOV-2019; adapted from earlier version 2017
# Pseudocode
#***************************************************************************

if($#ARGV < 1) {
    die "USAGE   : $0 in_ASR_likelihoods_file  out_confusionMatrix_file\n".
        "Example : $0 spkrReco_mono_LL.txt  results.spkrReco_mono_LL.txt\n"
}

($infile, $outfile) = @ARGV;
# Foreach test file, read and store trueSpeakerId, and logLikelihoods
#        w.r.t. all models in a 2-dimensional matrix:  score[fileIndex][modelIndex]
#       fileIndex is assigned to files serially; use a hash
#       modelIndex of BN_IN1 is 1; of BN_IN9 is 9 etc.
$nfile = 1;	# index of the next file to be processed
$nspk = 9;	# assumption: spkrIndexes are serially numbered
                # If there are 9 speakers, model/speakerNames will be
		# BN_IN1, BN_IN2, ... , BN_IN9
# speakerId is a hash array of speakerNames
my %spkrId_hash = ( '0834' => '1',
  '1010' => '2',
  '3108' => '3',
  '3713' => '4',
  '3958' => '5',
  '4046' => '6',
  '4811' => '7',
  '5958' => '8',
  '9161' => '9');

open(IN,"<$infile") || die "Can't open input file $infile :$!";
while (<IN>) {
    # Example:        BN_IN1  bin_4811_0004028137  -8.569
    $_ =~ /^\w+(\d+)\s+(\S+)\s+(.+)$/;		# eg. $_ represents
    $spkIndex	= $1;		# spkIndex = 1
    $fileName = $2;		# fileName = bin_4811_0004028137
    $logLikeli  = $3;		# logLikelyhood = -8.569

#	$fileName =~ /^\S+\_(\d+)\_\d+$/;
#	$speakerName = $1;	# speakerName = 4811

# fileIndex is a hash array of filenames
        if ( ! ($fileIndex{$fileName} ) ) {     # if this file is 'seen' for the first time,
          $fileIndex{$fileName} = $nfile;       # assign a serial number (index)
          $fileName_hash{$nfile} = $fileName;   # reverse hash array
          $nfile++;
        }
        $score[$fileIndex{$fileName}][$spkIndex] = 0 + $logLikeli;
}     # end: while ()
$nfile--;


open(OUT,">$outfile") || die "Can't open output file $outfile :$!";
print OUT "FileName \t\t\tlogLikelihoods by $nspk speaker models \t\t [WRONG recId]\n";

# Initialize the Confusion Matrix of nspk rows and nspk+1 columns
#   last column will contain the sum of entries in prev columns
$nspk1 = $nspk + 1;
foreach $trueId (1..$nspk) {           # ignore 0th row/column (langId starts from 1)
  foreach $recId (1..$nspk1) {
    $CM[$trueId][$recId] = 0;
  }
}

# If a file is not 'recognized' (program crashed === no output/logLikeli)
#   set the corresponding value to -99
foreach $ifile (1..$nfile) {
  foreach $ispk (1..$nspk) {
    if ( ! ($score[$ifile][$ispk])) { $score[$ifile][$ispk] = -99; }
  }
}

# Use ML criterion to assign spkId to each file; update CM
$nErr = 0;
foreach $ifile (1 .. $nfile) {
  $fileName_hash{$ifile} =~ /^bin_(\d{4})_.+$/;         # extract trueSpkId (1 thru 9)
  $trueId = $spkrId_hash{$1};	# 1 = spkrId{'0834'}
  $recId = 1;                   # initial/default value
  printf OUT "%30s\t", $fileName_hash{$ifile};
  foreach $ispk (1 .. $nspk) {
    printf OUT "%7.2f", $score[$ifile][$ispk];
    if ( $score[$ifile][$ispk] > $score[$ifile][$recId] ) {    # apply ML criterion
        $recId = $ispk;        # update the langId assigned by the LID system
    }
  }
  $CM[$trueId][$recId]++;       # update CM
  if ($recId != $trueId) {
    $nErr++;    #update error count
    print OUT "\t$recId";
  }
  print OUT "\n";
}


# Print the confusion matrix(absolute numbers)
print OUT "\nConfusion Matrix\n";
foreach $n (1 .. $nspk) {
  foreach $m (1 .. $nspk) {
    $CM[$n][$nspk1] += $CM[$n][$m];    # compute sum over row
    printf OUT "%5d\t", $CM[$n][$m];
  }
  printf OUT "%8d\n", $CM[$n][$nspk1];
}
printf OUT "\nThe total number of errors = %d\n\n", $nErr;

# Print the confusion matrix (%)
print OUT "\nConfusion Matrix (%)\n";
$sum = 0;
foreach $n (1 .. $nspk) {
  foreach $m (1 .. $nspk) {
    if ($CM[$n][$nspk1] != 0) {
      $CM[$n][$m] *= (100.0/$CM[$n][$nspk1]);
      printf OUT "%5.1f\t", $CM[$n][$m];
    } else {
      printf OUT "NaN\t";
    }
  }
  print OUT "\n";
  $sum += $CM[$n][$n];
}
printf OUT "SID Accuracy = %4.1f%s", $sum/$nspk, "%\n";

close OUT;
exit();
